namespace EchKode.PBMods.DamagePopups.ECS
{
	//------------------------------------------------------------------------------
	// <auto-generated>
	//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
	//
	//     Changes to this file may cause incorrect behavior and will be lost if
	//     the code is regenerated.
	// </auto-generated>
	//------------------------------------------------------------------------------
	public partial class EkReplayContext
	{
		public EkReplayEntity turnEntity { get { return GetGroup(EkReplayMatcher.Turn).GetSingleEntity(); } }
		public Turn turn { get { return turnEntity.turn; } }
		public bool hasTurn { get { return turnEntity != null; } }

		public EkReplayEntity SetTurn(int newI)
		{
			if (hasTurn)
			{
				throw new Entitas.EntitasException("Could not set Turn!\n" + this + " already has an entity with Turn!",
					"You should check if the context already has a turnEntity before setting it or use context.ReplaceTurn().");
			}
			var entity = CreateEntity();
			entity.AddTurn(newI);
			return entity;
		}

		public void ReplaceTurn(int newI)
		{
			var entity = turnEntity;
			if (entity == null)
			{
				entity = SetTurn(newI);
			}
			else
			{
				entity.ReplaceTurn(newI);
			}
		}

		public void RemoveTurn()
		{
			turnEntity.Destroy();
		}
	}

	//------------------------------------------------------------------------------
	// <auto-generated>
	//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
	//
	//     Changes to this file may cause incorrect behavior and will be lost if
	//     the code is regenerated.
	// </auto-generated>
	//------------------------------------------------------------------------------
	public partial class EkReplayEntity
	{
		public Turn turn { get { return (Turn)GetComponent(EkReplayComponentsLookup.Turn); } }
		public bool hasTurn { get { return HasComponent(EkReplayComponentsLookup.Turn); } }

		public void AddTurn(int newI)
		{
			var index = EkReplayComponentsLookup.Turn;
			var component = (Turn)CreateComponent(index, typeof(Turn));
			component.i = newI;
			AddComponent(index, component);
		}

		public void ReplaceTurn(int newI)
		{
			var index = EkReplayComponentsLookup.Turn;
			var component = (Turn)CreateComponent(index, typeof(Turn));
			component.i = newI;
			ReplaceComponent(index, component);
		}

		public void RemoveTurn()
		{
			RemoveComponent(EkReplayComponentsLookup.Turn);
		}
	}

	//------------------------------------------------------------------------------
	// <auto-generated>
	//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
	//
	//     Changes to this file may cause incorrect behavior and will be lost if
	//     the code is regenerated.
	// </auto-generated>
	//------------------------------------------------------------------------------
	public sealed partial class EkReplayMatcher
	{
		static Entitas.IMatcher<EkReplayEntity> _matcherTurn;

		public static Entitas.IMatcher<EkReplayEntity> Turn
		{
			get
			{
				if (_matcherTurn == null)
				{
					var matcher = (Entitas.Matcher<EkReplayEntity>)Entitas.Matcher<EkReplayEntity>.AllOf(EkReplayComponentsLookup.Turn);
					matcher.componentNames = EkReplayComponentsLookup.componentNames;
					_matcherTurn = matcher;
				}

				return _matcherTurn;
			}
		}
	}
}
